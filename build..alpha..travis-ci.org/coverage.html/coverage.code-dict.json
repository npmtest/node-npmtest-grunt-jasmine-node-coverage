{"/home/travis/build/npmtest/node-npmtest-grunt-jasmine-node-coverage/test.js":"/* istanbul instrument in package npmtest_grunt_jasmine_node_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-node-coverage/lib.npmtest_grunt_jasmine_node_coverage.js":"/* istanbul instrument in package npmtest_grunt_jasmine_node_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_jasmine_node_coverage = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_jasmine_node_coverage = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-node-coverage/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-jasmine-node-coverage && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_jasmine_node_coverage */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_jasmine_node_coverage\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_jasmine_node_coverage.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_jasmine_node_coverage.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_jasmine_node_coverage.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_jasmine_node_coverage.__dirname +\n                    '/lib.npmtest_grunt_jasmine_node_coverage.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jasmine-node-coverage/node_modules/grunt-jasmine-node-coverage/tasks/jasmine-node-task.js":"\n'use strict';\n\n// Native dependencies\nvar fs = require('fs'),\n  path = require('path');\n\n// 3rd party dependencies\nvar istanbul = require('istanbul'),\n  Jasmine = require('jasmine'),\n  SpecReporter = require('jasmine-spec-reporter'),\n  deepmerge = require('deepmerge'),\n  reporters = require('jasmine-reporters');\n\nmodule.exports = function jasmineNodeTask(grunt) {\n\n  var reports = [];\n\n  var reportingDir,\n    coverageVar = '$$cov_' + new Date().getTime() + '$$',\n    fileSrc = ['**/*.js'],\n    options,\n    done;\n\n  var coverageCollect = function coverageCollect(covPattern, collector) {\n\n    // The pattern should be relative to the directory in which the reports are written\n    var coverageFiles = grunt.file.expand(path.resolve(reportingDir, covPattern));\n\n    coverageFiles.forEach(function eachFiles(coverageFile) {\n      var contents = fs.readFileSync(coverageFile, 'utf8');\n      var fileCov = JSON.parse(contents);\n      if (options.coverage.relativize) {\n        var cwd = process.cwd();\n        var newFileCov = {};\n        for (var key in fileCov) {\n          if (fileCov.hasOwnProperty(key)) {\n            var item = fileCov[key];\n            var filePath = item.path;\n            var relPath = path.relative(cwd, filePath);\n            item.path = relPath;\n            newFileCov[relPath] = item;\n          }\n        }\n        fileCov = newFileCov;\n      }\n      collector.add(fileCov);\n    });\n  };\n\n  var coverageThresholdCheck = function coverageThresholdCheck(collector) {\n\n    // http://gotwarlost.github.io/istanbul/public/apidocs/classes/ObjectUtils.html\n    var objUtils = istanbul.utils;\n\n    // Check against thresholds\n    collector.files().forEach(function eachFiles(file) {\n      var summary = objUtils.summarizeFileCoverage(\n        collector.fileCoverageFor(file)\n      );\n\n      Object.keys(options.coverage.thresholds).forEach(function eachKeys(metric) {\n        var threshold = options.coverage.thresholds[metric];\n        var actual = summary[metric];\n        if (!actual) {\n          grunt.fail.warn('unrecognized metric: ' + metric);\n        }\n        if (actual.pct < threshold) {\n          grunt.fail.warn('expected ' + metric + ' coverage to be at least ' + threshold +\n          '% but was ' + actual.pct + '%' + '\\n\\tat (' + file + ')');\n        }\n      });\n    });\n  };\n\n  var includeAllSources = function includeAllSources(cov, opts) {\n    if (!opts || !opts.instrumenter || !opts.transformer || !opts.matchFn || !cov) {\n      grunt.log.error('includeAllSources was set but coverage wasn\\'t run.');\n      return;\n    }\n\n    var instrumenter = opts.instrumenter,\n      transformer = opts.transformer,\n      matchFn = opts.matchFn;\n\n    // Source: https://github.com/gotwarlost/istanbul/blob/v0.4.0/lib/command/common/run-with-cover.js\n    // Starting at line 220\n\n    // Files that are not touched by code ran by the test runner is manually instrumented, to\n    // illustrate the missing coverage.\n    matchFn.files.forEach(function eachMatch(file) {\n      if (!cov[file]) {\n        transformer(fs.readFileSync(file, 'utf-8'), file);\n\n        // When instrumenting the code, istanbul will give each FunctionDeclaration a value of 1 in coverState.s,\n        // presumably to compensate for function hoisting. We need to reset this, as the function was not hoisted,\n        // as it was never loaded.\n        Object.keys(instrumenter.coverState.s).forEach(function eachKey(key) {\n          instrumenter.coverState.s[key] = 0;\n        });\n\n        cov[file] = instrumenter.coverState;\n      }\n    });\n  };\n\n  var collectReports = function collectReports(opts) {\n    var reportFile = path.resolve(reportingDir, options.coverage.reportFile),\n      // http://gotwarlost.github.io/istanbul/public/apidocs/classes/Collector.html\n      collector = new istanbul.Collector(),\n      cov = global[coverageVar];\n\n    if (options.coverage.includeAllSources) {\n      includeAllSources(cov, opts);\n    }\n\n    // important: there is no event loop at this point\n    // everything that happens in this exit handler MUST be synchronous\n    grunt.file.mkdir(reportingDir); // yes, do this again since some test runners could clean the dir initially created\n\n    grunt.verbose.writeln('Writing coverage object [' + reportFile + ']');\n\n    fs.writeFileSync(reportFile, JSON.stringify(cov, null, ' '), 'utf8');\n\n    if (options.coverage.collect !== false) {\n      options.coverage.collect.forEach(function eachCollect(covPattern) {\n        coverageCollect(covPattern, collector);\n      });\n    }\n    else {\n      collector.add(cov);\n    }\n\n    grunt.verbose.writeln('Writing coverage reports at [' + reportingDir + ']');\n\n    reports.forEach(function eachReport(report) {\n      report.writeReport(collector, true);\n    });\n\n    coverageThresholdCheck(collector);\n  };\n\n  var exitHandler = function exitHandler(opts) {\n    if (typeof global[coverageVar] !== 'object' || Object.keys(global[coverageVar]).length === 0) {\n      grunt.log.error('No coverage information was collected, exit without writing coverage information');\n      return;\n    }\n    collectReports(opts);\n  };\n\n  var istanbulMatcherRun = function istanbulMatcherRun(matchFn) {\n\n    var instrumenter = new istanbul.Instrumenter({coverageVariable: coverageVar});\n    var transformer = instrumenter.instrumentSync.bind(instrumenter);\n    var hookOpts = {verbose: options.isVerbose};\n\n    istanbul.hook.hookRequire(matchFn, transformer, hookOpts);\n\n    // Hook context to ensure that all requireJS modules get instrumented.\n    // Hooking require in isolation does not appear to be sufficient.\n    istanbul.hook.hookRunInThisContext(matchFn, transformer, hookOpts);\n\n    // initialize the global variable to stop mocha from complaining about leaks\n    global[coverageVar] = {};\n\n    // Return values which will be used later during coverage reporting\n    return {\n      instrumenter: instrumenter,\n      transformer: transformer,\n      matchFn: matchFn\n    };\n  };\n\n  var addReporters = function addReporters(jasmine) {\n    var ropts = options.jasmine.reporters;\n\n    var reporter;\n    if (ropts.teamcity) {\n      reporter = new reporters.TeamCityReporter(); // no options to set\n      reporter.name = 'TeamCity Reporter';\n      jasmine.addReporter(reporter);\n    }\n    else {\n      reporter = new SpecReporter(ropts.spec);\n      reporter.name = 'Spec Reporter';\n      jasmine.addReporter(reporter);\n    }\n  };\n\n  var runner = function runner(opts) {\n    opts = opts || {};\n\n    if (options.captureExceptions) {\n      // Grunt will kill the process when it handles an uncaughtException, so we need to\n      // remove their handler to allow the test suite to continue.\n      // A downside of this is that we ignore any other registered `ungaughtException`\n      // handlers.\n      process.removeAllListeners('uncaughtException');\n      process.on('uncaughtException', function onUncaught(e) {\n        grunt.log.error('Caught unhandled exception: ', e.toString());\n        grunt.log.error(e.stack);\n      });\n    }\n    try {\n      var jasmine = new Jasmine();\n      jasmine.loadConfig(options.jasmine);\n      addReporters(jasmine);\n      jasmine.onComplete(function jasmineComplete(passed) {\n        options.onComplete(passed, opts);\n      });\n      jasmine.execute();\n    }\n    catch (error) {\n      grunt.log.error('Jasmine runner failed: ' + error.stack);\n      if (options.forceExit) {\n        throw error;\n      }\n      else {\n        done(error);\n      }\n    }\n  };\n\n  var doCoverage = function doCoverage() {\n\n    // set up require hooks to instrument files as they are required\n    var Report = istanbul.Report;\n\n    grunt.file.mkdir(reportingDir); // ensure we fail early if we cannot do this\n\n    var reportClassNames = options.coverage.report;\n\n    // Add teamcity to the coverage reporter if it was set as jasmine reporter\n    if (options.jasmine.reporters.teamcity && reportClassNames.indexOf('teamcity') === -1) {\n      reportClassNames = reportClassNames.concat(['teamcity']);\n    }\n\n    reportClassNames.forEach(function eachReport(reportClassName) {\n      reports.push(Report.create(reportClassName, {\n        dir: reportingDir,\n        watermarks: options.coverage.watermarks\n      }));\n    });\n\n    var excludes = options.coverage.excludes || [];\n    excludes.push('**/node_modules/**');\n\n    // http://gotwarlost.github.io/istanbul/public/apidocs/classes/Istanbul.html#method_matcherFor\n    istanbul.matcherFor({\n      root: options.projectRoot,\n      includes: fileSrc,\n      excludes: excludes\n    }, function matcherCallback(err, matchFn) {\n      if (err) {\n        grunt.fail.warn('istanbul.matcherFor failed.');\n        grunt.fail.warn(err);\n        return;\n      }\n      var runnerOpts = istanbulMatcherRun(matchFn);\n      runner(runnerOpts);\n    });\n\n  };\n\n  grunt.registerMultiTask('jasmine_node', 'Runs jasmine-node with Istanbul code coverage', function registerGrunt() {\n\n    // Default options. Once Grunt does recursive merge, use that, maybe 0.4.6\n    options = deepmerge({\n\n      // Used only in this plugin, thus can be refactored out\n      projectRoot: process.cwd(), // string\n      forceExit: false, // boolean, exit on failure\n      captureExceptions: false, // boolean\n      isVerbose: false,\n\n      // Jasmine options\n      jasmine: {\n        spec_dir: 'spec',\n        reporters: {\n          spec: {}\n        }\n      },\n\n      // Coverage options\n      coverage: { // boolean|object\n        reportFile: 'coverage.json',\n        collect: [ // paths relative to 'reportDir'\n          'coverage*.json'\n        ], // coverage report file matching patters\n        relativize: true,\n        thresholds: {\n          statements: 0,\n          branches: 0,\n          lines: 0,\n          functions: 0\n        },\n        includeAllSources: false,\n        reportDir: 'coverage',\n        excludes: []\n      }\n    }, this.options());\n\n    // Support old config with Spec reporter only\n    if (options.jasmine.reporter) {\n      options.jasmine.reporters = {\n        spec: options.jasmine.reporter\n      };\n    }\n\n    options.jasmine.spec_files = options.jasmine.spec_files || ['**/*[sS]pec.js'];\n    if (options.coverage !== false) {\n      options.coverage.report = options.coverage.report || ['lcov', 'text-summary'];\n    }\n\n    fileSrc = this.data.src || fileSrc;\n\n    // Tell grunt this task is asynchronous.\n    done = this.async();\n\n    if (typeof options.onComplete !== 'function') {\n      options.onComplete = function onComplete(passed, opts) {\n        var exitCode = 1;\n        grunt.log.writeln('');\n        if (passed) {\n          exitCode = 0;\n          if (options.coverage !== false) {\n            exitHandler(opts);\n          }\n        }\n\n        if (options.forceExit && exitCode === 1) {\n          grunt.fail.warn('Test runner failed.', exitCode);\n        }\n        done(exitCode === 0);\n      };\n    }\n\n    if (options.coverage !== false) {\n      reportingDir = path.resolve(process.cwd(), options.coverage.reportDir);\n      doCoverage();\n    }\n    else {\n      runner();\n    }\n  });\n};\n"}